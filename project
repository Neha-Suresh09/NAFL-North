def calculate_cf():
    try:
        length = float(length_entry.get())
        cf = length * 0.8
        result_label.config(text=f"Total Carbon footprint = {cf} kg for the current month",)
    except ValueError:
        result_label.config(text="Please enter valid numeric values.")

length_label = tk.Label(root, text="Enter electricity consumption (in kWh):")
length_entry = tk.Entry(root)


result_label = tk.Label(root, text="")

calculate_button = tk.Button(root, text="Calculate Carbon footprint", command=calculate_cf)

length_label.pack()
length_entry.pack()
calculate_button.pack()
result_label.pack()

root.mainloop()

root = tk.Tk()
root.title("Carbon Footprint graph")
root.geometry("800x600")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# Create a Matplotlib figure
fig = Figure(figsize=(6, 4), dpi=100)
ax = fig.add_subplot(111)
x=["your carbon footprint","recommended carbon footprint"]
a=int(input("Enter carbon footprint: "))
y=[a,1500]

ax.bar(x,y, color='skyblue')
ax.set_xlabel('Categories')
ax.set_ylabel('Values')
ax.set_title('Bar Graph in Tkinter')
canvas = FigureCanvasTkAgg(fig, master=root)
canvas_widget = canvas.get_tk_widget()
canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
root.mainloop()

if a>1500:
    print("Carbon footprint level is higher than the recommended levels. ")
    print("""Some solutions are:\n Use energy-efficient appliances and practices.
 Transition to renewable energy sources.
 Reduce, reuse, and recycle to minimize waste.
 Choose eco-friendly transportation options.
 Support reforestation and other carbon offset initiatives.
 Raise awareness and advocate for climate action. """)
else:
    print("Carbon footprint level is lower than or equal to the recommended levels. You are on the right track!")
